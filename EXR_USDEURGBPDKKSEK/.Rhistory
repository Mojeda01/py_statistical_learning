setwd("/Volumes/Ultra Touch/Documents/project4/Machine Learning - R/R-projects/EXR_USDEURGBPDKKSEK")
EXR.USDEURGBP <- read.csv2("/Volumes/Ultra Touch/Documents/project4/Machine Learning - R/R-projects/EXR_USDEURGBPDKKSEK/EXR-USDEURGBP.csv")
View(EXR.USDEURGBP)
View(EXR.USDEURGBP)
EXR.ALL <- read.csv2("/Volumes/Ultra Touch/Documents/project4/Machine Learning - R/R-projects/EXR_USDEURGBPDKKSEK/EXR-ALL.csv")
View(EXR.ALL)
test <- EXR.ALL$OBS_VALUE
DKK <- EXR.ALL$BASE_CUR
rm(test)
rm(EXR.USDEURGBP)
DKK <- EXR.ALL$BASE_CUR[1]
DKK <- EXR.ALL$BASE_CUR[max("DKK")]
DKK <- EXR.ALL$BASE_CUR["DKK"]
DKK <- EXR.ALL$BASE_CUR[ncol("DKK")]
DKK <- EXR.ALL$BASE_CUR[nrow("DKK")]
DKK <- EXR.ALL$BASE_CUR[2518]
DKK <- EXR.ALL$BASE_CUR[2518,5034]
DKK <- EXR.ALL$BASE_CUR[2518:5034]
rm(DKK)
DKK_OBS <- EXR.ALL$OBS_VALUE[2518:5034]
SEK_length <- EXR.ALL$BASE_CUR[89769:92285] # Length of the SEK to NOK (index length)
SEK_OBS <- EXR.ALL$OBS_VALUE[89769:92285] # The exchange rate for SEK/NOK
rm(SEK_length)
USD_OBS <- EXR.ALL$OBS_VALUE[30528:33044] # The exchange rate for USD/NOK
ln <- lm(USD_OBS ~ DKK_OBS, SEK_OBS, data=EXR.ALL)
View(ln)
summary(ln)
dataset <- data.frame(DKK_OBS, SEK_OBS, USD_OBS)
View(dataset)
linear_regression <- lm(USD_OBS ~ DKK_OBS, SEK_OBS, data=dataset)
summary(linear_regression)
colnames(EXR.ALL)
EXR.ALL <- read.csv2("/Volumes/Ultra Touch/Documents/project4/Machine Learning - R/R-projects/EXR_USDEURGBPDKKSEK/EXR-ALL.csv")
View(EXR.ALL)
colnames(EXR.ALL)
rownames(EXR.ALL)
# Assuming df is your dataframe
column_name <- names(EXR.ALL)[which(sapply(EXR.ALL, function(x) any(x == "HUF")), arr.ind = TRUE)]
rm(column_name)
HUFNOK <- EXR.ALL$OBS_VALUE[1:2517]
mean(HUFNOK)
DKKNOK <- EXR.ALL$OBS_VALUE[2518:5034]
RUBNOK <- EXR.ALL$OBS_VALUE[5035:58329]
rm(RUBNOK)
RUBNOK <- EXR.ALL$OBS_VALUE[5035:7097]
rm(DKKNOK, HUFNOK, RUBNOK)
# Fixing the data
HUFNOK_index <- EXR.ALL$Basisvaluta
HUFNOK_index
rm(HUFNOK_index)
# Fixing the data
basisvaluta <- EXR.ALL$Basisvaluta
basisvaluta
basisvaluta["Ungarske forinter"]
rm(basisvaluta)
EXR.USDEURGBP <- read.csv2("/Volumes/Ultra Touch/Documents/project4/Machine Learning - R/R-projects/EXR_USDEURGBPDKKSEK/EXR-USDEURGBP.csv")
View(EXR.USDEURGBP)
# Fixing the data
DKKNOK <- EXR.USDEURGBP$OBS_VALUE[1:1260]
USDNOK <- EXR.USDEURGBP$OBS_VALUE[1260:2520]
USDNOK <- EXR.USDEURGBP$OBS_VALUE[1261:2520]
GBPNOK <- EXR.USDEURGBP$OBS_VALUE[2521:3780]
GBPNOK
EURNOK <- EXR.USDEURGBP$OBS_VALUE[3781:5040]
SEKNOK <- EXR.USDEURGBP$OBS_VALUE[5041:6300]
# Using the fixed data to create an dataframe
df <- data.frame(DKKNOK, USDNOK, GBPNOK, EURNOK, SEKNOK)
View(df)
df_ln <- lm(USDNOK ~ DKKNOK, GBPNOK, EURNOK, SEKNOK, data=df)
# Using the fixed data to create an dataframe
df <- data.frame(DKKNOK, USDNOK, GBPNOK, EURNOK, SEKNOK)
df_ln <- lm(USDNOK ~ DKKNOK, GBPNOK, EURNOK, SEKNOK, data=df)
df_ln <- lm(df$USDNOK ~ df$DKKNOK, df$GBPNOK, df$EURNOK, df$SEKNOK, data=df)
df$DKKNOK
rm(DKKNOK, EURNOK, GBPNOK, SEKNOK, USDNOK)
ln <- lm(USDNOK~DKKNOK, GBPNOK, EURNOK, SEKNOK, data=df)
# Using the fixed data to create an dataframe
df <- data.frame(DKKNOK, USDNOK, GBPNOK, EURNOK, SEKNOK)
DKKNOK <- EXR.USDEURGBP$OBS_VALUE[1:1260]
USDNOK <- EXR.USDEURGBP$OBS_VALUE[1261:2520]
GBPNOK <- EXR.USDEURGBP$OBS_VALUE[2521:3780]
EURNOK <- EXR.USDEURGBP$OBS_VALUE[3781:5040]
SEKNOK <- EXR.USDEURGBP$OBS_VALUE[5041:6300]
# Using the fixed data to create an dataframe
df <- data.frame(DKKNOK, USDNOK, GBPNOK, EURNOK, SEKNOK)
ln <- lm(USDNOK~DKKNOK, GBPNOK, EURNOK, SEKNOK, data=df)
ln <- lm(USDNOK~DKKNOK, GBPNOK, EURNOK, SEKNOK, data=EXR.USDEURGBP)
rm(DKKNOK, EURNOK, GBPNOK, SEKNOK, USDNOK)
# Using the fixed data to create an dataframe
df <- data.frame(DKKNOK, USDNOK, GBPNOK, EURNOK, SEKNOK)
View(df)
ln <- lm(df$USDNOK ~ df$DKKNOK + df$GBPNOK + df$EURNOK + df$SEKNOK, data = df)
View(ln)
summary(ln)
plot(ln)
predictions <- predict(ln)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK")
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK")
abline(df$USDNOK)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK")
line(df$USDNOK)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK")
abline(df$USDNOK)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK")
abline(a=df$USDNOK)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK")
lines(df$USDNOK)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK",
col="magenta")
lines(df$USDNOK)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK",
col="magenta")
lines(df$USDNOK, col="lightblue")
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK",
col="magenta")
lines(df$USDNOK, col="lightblue")
legend(1, 95, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.8)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK",
col="magenta")
lines(df$USDNOK, col="lightblue")
legend(1, 95, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.8)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK",
col="magenta")
lines(df$USDNOK, col="lightblue")
legend(1, 10, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.8)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK",
col="magenta")
lines(df$USDNOK, col="lightblue")
legend(1, 11, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.8)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK",
col="magenta")
lines(df$USDNOK, col="lightblue")
legend(1, 11.5, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.8)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted USDNOK",
col="magenta")
lines(df$USDNOK, col="lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
DATES <- EXR.USDEURGBP$TIME_PERIOD[1:1260]
DATES
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted vs. real USDNOK",
col="magenta")
lines(df$USDNOK, col="lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted vs. real USDNOK",
col="magenta", frame.plot = FALSE)
lines(df$USDNOK, col="lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted vs. real USDNOK",
col="magenta", frame.plot = FALSE)
lines(df$USDNOK, col="lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Add the dates to the x-axis with Y-M-D format
axis.Date(1, at = DATES, labels = format(date_vector, "%Y-%m-%d"), cex.axis = 0.7)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted vs. real USDNOK",
col="magenta", frame.plot = FALSE)
lines(df$USDNOK, col="lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Add the dates to the x-axis with Y-M-D format
axis.Date(1, at = DATES, labels = format(DATES, "%Y-%m-%d"), cex.axis = 0.7)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted vs. real USDNOK",
col="magenta", frame.plot = FALSE)
lines(df$USDNOK, col="lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Add the dates to the x-axis with Y-M-D format
date_vector <- EXR.USDEURGBP$TIME_PERIOD[1:1260]
axis.Date(1, at = date_vector, labels = format(date_vector, "%Y-%m-%d"), cex.axis = 0.7)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted vs. real USDNOK",
col="magenta", frame.plot = FALSE)
lines(df$USDNOK, col="lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Add the dates to the x-axis with Y-M-D format
date_vector <- as.Date(EXR.USDEURGBP$TIME_PERIOD[1:1260], format = "%Y-%m-%d")
axis.Date(1, at = date_vector, labels = format(date_vector, "%Y-%m-%d"), cex.axis = 0.7)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted vs. real USDNOK",
col="magenta", frame.plot = FALSE)
lines(df$USDNOK, col="lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Add the dates to the x-axis with Y-M-D format
date_vector <- as.Date(EXR.USDEURGBP$TIME_PERIOD[1:1260], format = "%Y-%m-%d")
axis.Date(1, at = date_vector, labels = format(date_vector, "%Y-%m-%d"), cex.axis = 0.7)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted vs. real USDNOK",
col="magenta", frame.plot = FALSE)
lines(df$USDNOK, col="lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Add the dates to the x-axis with Y-M-D format
date_vector <- as.Date(EXR.USDEURGBP$TIME_PERIOD[1:1260], format = "%Y-%m-%d")
axis.Date(1, at = date_vector, labels = format(date_vector, "%Y-%m-%d"), cex.axis = 0.7)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted vs. real USDNOK",
col="magenta", frame.plot = FALSE)
lines(df$USDNOK, col="lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Add the dates to the x-axis with Y-M-D format
date_vector <- as.Date(EXR.USDEURGBP$TIME_PERIOD[1:1260], format = "%Y-%m-%d")
axis.Date(date_vector)
class(DATES)
Dates <- as.Date(DATES)
# Plotting predicted against real data-set
plot(predictions, type = "l", main = "Plot of Predicted values", xlab = "Index", ylab = "predicted vs. real USDNOK",
col="magenta", frame.plot = FALSE)
lines(df$USDNOK, col="lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
Dates <- as.Date(DATES)
# Use the base format function explicitly
axis.Date(1, at = date_vector, labels = base::format(date_vector, "%Y-%m-%d"), cex.axis = 0.7)
# Use the base format function explicitly
axis.Date(1, at = date_vector, labels = base::format(date_vector, "%Y-%m-%d"), cex.axis = 0.7)
# Convert the date vector to Date class if it's not already
date_vector <- as.Date(EXR.USDSEURGBP$TIME_PERIOD[1:1260], format = "%Y-%m-%d")
# Fixing the data
DKKNOK <- EXR.USDEURGBP$OBS_VALUE[1:1260]
USDNOK <- EXR.USDEURGBP$OBS_VALUE[1261:2520]
GBPNOK <- EXR.USDEURGBP$OBS_VALUE[2521:3780]
EURNOK <- EXR.USDEURGBP$OBS_VALUE[3781:5040]
SEKNOK <- EXR.USDEURGBP$OBS_VALUE[5041:6300]
DATES <- EXR.USDEURGBP$TIME_PERIOD[1:1260]
# Using the fixed data to create an dataframe
df <- data.frame(DKKNOK, USDNOK, GBPNOK, EURNOK, SEKNOK)
ln <- lm(df$USDNOK ~ df$DKKNOK + df$GBPNOK + df$EURNOK + df$SEKNOK, data = df)
summary(ln)
plot(ln)
# Convert the date vector to Date class if it's not already
date_vector <- as.Date(EXR.USDSEURGBP$TIME_PERIOD[1:1260], format = "%Y-%m-%d")
# Fixing the data
DKKNOK <- EXR.USDEURGBP$OBS_VALUE[1:1260]
USDNOK <- EXR.USDEURGBP$OBS_VALUE[1261:2520]
GBPNOK <- EXR.USDEURGBP$OBS_VALUE[2521:3780]
EURNOK <- EXR.USDEURGBP$OBS_VALUE[3781:5040]
SEKNOK <- EXR.USDEURGBP$OBS_VALUE[5041:6300]
DATES <- EXR.USDEURGBP$TIME_PERIOD[1:1260]
# Convert the date vector to Date class if it's not already
date_vector <- as.Date(EXR.USDSEURGBP$TIME_PERIOD[1:1260], format = "%Y-%m-%d")
# Convert the date vector to Date class if it's not already
date_vector <- as.Date(EXR.USDSEURGBP$TIME_PERIOD[1:1260], format = "%Y-%m-%d")
# Convert the date vector to Date class if it's not already
date_vector <- as.Date(DATES, format = "%Y-%m-%d")
# Check the class of date_vector to make sure it's Date
class(date_vector)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
# Use the base format function explicitly
axis.Date(1, at = date_vector, labels = base::format(date_vector, "%Y-%m-%d"), cex.axis = 0.7)
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Use the base format function explicitly
axis.Date(1, at = date_vector, labels = base::format(date_vector, "%Y-%m-%d"), cex.axis = 0.7)
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Convert the date vector to Date class if it's not already
date_vector <- as.Date(DATES, format = "%Y-%m-%d")
# Check the class of date_vector to make sure it's Date
class(date_vector)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
# Use the base format function explicitly
axis.Date(1, at = date_vector, labels = base::format(date_vector, "%Y-%m-%d"), cex.axis = 0.7)
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
# Use the base format function explicitly
axis.Date(1, at = date_vector, labels = base::format(date_vector, "%Y-%m-%d"), cex.axis = 0.2)
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Use the base format function explicitly
axis.Date(1, at = date_vector, labels = base::format(date_vector, "%Y-%m-%d"), cex.axis = 0.2)
# Check the class of date_vector to make sure it's Date
class(date_vector)
# Convert the date vector to Date class if it's not already
date_vector <- as.Date(DATES, format = "%Y-%m-%d")
# Check the class of date_vector to make sure it's Date
class(date_vector)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
# Use the base format function explicitly
axis.Date(1, at = date_vector, labels = base::format(date_vector, "%Y-%m-%d"), cex.axis = 0.2)
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Convert the date vector to Date class if it's not already
date_vector <- as.Date(DATES, format = "%Y-%m-%d")
# Check the class of date_vector to make sure it's Date
class(date_vector)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
axis_dates <- seq(from=min(date_vector), to=max(date_vector), length.out=length(predictions))
axis.Date(1, at=axis_dates, labels=format(axis_dates, "%Y-%m-%d"), cex.axis=0.7)
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Convert the date vector to Date class if it's not already
date_vector <- as.Date(DATES, format = "%Y-%m-%d")
# Check the class of date_vector to make sure it's Date
class(date_vector)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
axis_dates <- seq(from=min(date_vector), to=max(date_vector), length.out=length(predictions))
axis.Date(1, at=axis_dates, labels=format(axis_dates, "%Y-%m-%d"), cex.axis=0.7)
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Convert the date vector to Date class if it's not already
date_vector <- as.Date(DATES, format = "%Y-%m-%d")
# Check the class of date_vector to make sure it's Date
class(date_vector)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
axis_dates <- seq(from=min(date_vector), to=max(date_vector), length.out=length(predictions))
axis.Date(1, at=axis_dates, labels=format(axis_dates, "%Y-%m-%d"), cex.axis=0.7)
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Convert the date vector to Date class if it's not already
date_vector <- as.Date(DATES, format = "%Y-%m-%d")
# Check the class of date_vector to make sure it's Date
class(date_vector)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Fixing the data
DKKNOK <- EXR.USDEURGBP$OBS_VALUE[1:1260]
USDNOK <- EXR.USDEURGBP$OBS_VALUE[1261:2520]
GBPNOK <- EXR.USDEURGBP$OBS_VALUE[2521:3780]
EURNOK <- EXR.USDEURGBP$OBS_VALUE[3781:5040]
SEKNOK <- EXR.USDEURGBP$OBS_VALUE[5041:6300]
DATES <- EXR.USDEURGBP$TIME_PERIOD[1:1260]
# Using the fixed data to create an dataframe
df <- data.frame(DKKNOK, USDNOK, GBPNOK, EURNOK, SEKNOK)
ln <- lm(df$USDNOK ~ df$DKKNOK + df$GBPNOK + df$EURNOK + df$SEKNOK, data = df)
summary(ln)
plot(ln)
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
legend(1, 11.0, legend=c("Predicted Values", "Real Dataset"),
col=c("magenta", "lightblue"), lty=1:2, cex=0.5)
summary(ln)
library(glmnet)
# Prepare the data
x <- as.matrix(df[, c("DKKNOK", "GBPNOK", "EURNOK", "SEKNOK")])
y <- df$USDNOK
# Scale the data
x_scaled <- scale(x)
y_scaled <- scale(y)  # Scale the dependent variable as well if needed
# Fit the ridge regression model
ridge_model <- glmnet(x_scaled, y_scaled, alpha = 0)
# View the model
print(ridge_model)
# Optional: Use cross-validation to find the optimal lambda
cv_ridge <- cv.glmnet(x_scaled, y_scaled, alpha = 0)
best_lambda <- cv_ridge$lambda.min
print(best_lambda)
# Fit the model with the best lambda
ridge_model_opt <- glmnet(x_scaled, y_scaled, alpha = 0, lambda = best_lambda)
print(ridge_model_opt)
ridge_predictions <- predict(ridge_model_opt)
ridge_predictions <- predict(ridge_model_opt, newx = x_scaled)
View(ridge_predictions)
# Prepare the data
x <- as.matrix(df[, c("DKKNOK", "GBPNOK", "EURNOK", "SEKNOK")])
y <- df$USDNOK
# Fit the ridge regression model
ridge_model <- glmnet(x, y, alpha = 0)
# View the model
print(ridge_model)
# Optional: Use cross-validation to find the optimal lambda
cv_ridge <- cv.glmnet(x, y, alpha = 0)
best_lambda <- cv_ridge$lambda.min
print(best_lambda)
# Fit the model with the best lambda
ridge_model_opt <- glmnet(x, y, alpha = 0, lambda = best_lambda)
print(ridge_model_opt)
ridge_predictions <- predict(ridge_model_opt, newx = x)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
lines(ridge_predictions, col="green")
legend(1, 11.0, legend=c("Linear Regression", "Real Dataset", "Ridge Regression"),
col=c("magenta", "lightblue", "green"), lty=1:2, cex=0.5)
###########################################################################
# LASSO REGRESSION
# Fit the Lasso regression model
lasso_model <- glmnet(x, y, alpha = 1)
# Optionally use cross-validation to find the optimal lambda
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit the model using the best lambda
lasso_model_opt <- glmnet(x, y, alpha = 1, lambda = best_lambda)
lasso_predictions <- predict(lasso_model_opt)
lasso_predictions <- predict(lasso_model_opt, newx = x)
View(lasso_predictions)
# Fit the Lasso regression model
lasso_model <- glmnet(x, y, alpha = 1)
# Optionally use cross-validation to find the optimal lambda
cv_lasso <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_lasso$lambda.min
# Fit the model using the best lambda
lasso_model_opt <- glmnet(x, y, alpha = 1, lambda = best_lambda)
lasso_predictions <- predict(lasso_model_opt, newx = x)
# Plot your data
plot(predictions, type = "l", main = "Plot of Predicted values",
xlab = "Date", ylab = "predicted vs. real USDNOK", col = "magenta", frame.plot = FALSE, xaxt = 'n')
lines(df$USDNOK, col = "lightblue")
lines(ridge_predictions, col="green")
lines(lasso_predictions, col="red")
legend(1, 11.0, legend=c("Linear Regression", "Real Dataset", "Ridge Regression", "Lasso Regression"),
col=c("magenta", "lightblue", "green", "red"), lty=1:2, cex=0.5)
mean(predictions)
mean(ridge_predictions)
mean(lasso_predictions)
